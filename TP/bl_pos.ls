/PROG  BL_POS
/ATTR
OWNER		= MNEDITOR;
COMMENT		= "";
PROG_SIZE	= 4451;
CREATE		= DATE 17-09-29  TIME 11:48:20;
MODIFIED	= DATE 18-03-18  TIME 20:00:52;
FILE_NAME	= ;
VERSION		= 0;
LINE_COUNT	= 147;
MEMORY_SIZE	= 4811;
PROTECT		= READ_WRITE;
TCD:  STACK_SIZE	= 0,
      TASK_PRIORITY	= 50,
      TIME_SLICE	= 0,
      BUSY_LAMP_OFF	= 0,
      ABORT_REQUEST	= 0,
      PAUSE_REQUEST	= 0;
DEFAULT_GROUP	= *,*,*,*,*;
CONTROL_CODE	= 00000000 00000000;
/APPL
  ARC : TRUE ; 
  ARC Welding Equipment : 1,*,*,*,*;

MPAS ;
MPAS_NUM_PASSES        : 0;
MPAS_LAST_PASS         : 0;
MPAS_CURRENT_PASS      : 0;
MPAS_STATUS_PASS       : 0;
/MN
   1:  !****************************** ;
   2:  ! Global X and Jump POS ;
   3:  !****************************** ;
   4:  ! Getting raw positions ;
   5:  R[451]=$scr_grp[1].$mch_pos_y ;
   6:  R[452]=$scr_grp[3].$mch_pos_y ;
   7:  R[453]=$scr_grp[1].$mch_pos_x ;
   8:  R[454]=$scr_grp[3].$mch_pos_x ;
   9:  R[455]=$scr_grp[2].$mch_ang[1] ;
  10:   ;
  11:  ! Calculating local X ;
  12:  R[456]=R[451]-R[466]    ;
  13:  R[457]=R[452]-R[467]    ;
  14:   ;
  15:  ! Calculating global X ;
  16:  R[458]=R[456]+R[455]    ;
  17:  R[459]=R[457]+R[455]    ;
  18:   ;
  19:  ! Robot distance ;
  :! allways positive; 
  20:  IF (R[81]=1) THEN ;
  21:  R[460]=R[458]-R[459] ;
  23:  ELSE ;
  24:  R[460]=R[453]-R[454] ;
  26:  ENDIF ;
    22:  IF (R[460]<0),R[468]=(R[460]*(-1)) ;
        22:  IF (R[460]>0),R[468]=(R[460]) ;
  27:  !****************************** ;
  28:  ! Setting Jump actions ;
  29:  !****************************** ;
  30:   ;
  31:  ! IF Crosses are present ;
  32:  IF (R[62]<>0) THEN ;
  33:  IF (R[70]=51) THEN ;
  34:   ;
  35:  !-------------------------------- ;
  36:  !X profiles ;
  37:  !-------------------------------- ;
  38:   ;
  39:  IF (R[81]=1) THEN ;
  40:  ! Positive direction ;
  41:  !-------------------------------- ;
  42:  IF (R[82]=1) THEN ;
  43:   ;
  44:  ! --------------R1 go up--------- ;
  45:  IF ((R[158]=(2)) AND (R[469]<>1) AND (R[469]<>4) AND (R[461]<>0) AND (R[201]=3)) THEN ;
  46:  IF (R[458]>R[461]),R[158]=(-1) ;
  47:  ENDIF ;
  48:   ;
  49:  ! --------------R3 go up--------- ;
  50:  IF ((R[159]=(2)) AND (R[469]<>3) AND (R[469]<>4) AND (R[463]<>0) AND (R[201]=3)) THEN ;
  51:  IF (R[459]>R[463]),R[159]=(-1) ;
  52:  ENDIF ;
  53:   ;
  54:  ! --------- R1 go down ---------- ;
  55:  IF ((R[158]=(-2)) AND (R[470]<>1) AND (R[470]<>4) AND (R[201]=3)) THEN ;
  56:  IF (R[458]>R[462]-R[465]),R[158]=1 ;
  57:  ENDIF ;
  58:   ;
  59:  ! --------- R3 go down ---------- ;
  60:  IF ((R[159]=(-2)) AND (R[470]<>3) AND (R[470]<>4) AND (R[201]=3)) THEN ;
  61:  IF (R[459]>R[464]-R[465]),R[159]=1 ;
  62:  ENDIF ;
  63:  ELSE ;
  64:  ! Negative direction ;
  65:  !-------------------------------- ;
  66:  ! --------------R1 go up--------- ;
  67:  IF ((R[158]=(2)) AND (R[469]<>1) AND (R[469]<>4) AND (R[461]<>0) AND (R[201]=3)) THEN ;
  68:  IF (R[458]<R[461]),R[158]=(-1) ;
  69:  ENDIF ;
  70:   ;
  71:  ! --------------R3 go up--------- ;
  72:  IF ((R[159]=(2)) AND (R[469]<>3) AND (R[469]<>4) AND (R[463]<>0) AND (R[201]=3)) THEN ;
  73:  IF (R[459]<R[463]),R[159]=(-1) ;
  74:  ENDIF ;
  75:   ;
  76:  ! --------- R1 go down ---------- ;
  77:  IF ((R[158]=(-2)) AND (R[470]<>1) AND (R[470]<>4) AND (R[201]=3)) THEN ;
  78:  IF (R[458]<R[462]+R[465]),R[158]=1 ;
  79:  ENDIF ;
  80:   ;
  81:  ! --------- R3 go down ---------- ;
  82:  IF ((R[159]=(-2)) AND (R[470]<>3) AND (R[470]<>4) AND (R[201]=3)) THEN ;
  83:  IF (R[459]<R[464]+R[465]),R[159]=1 ;
  84:  ENDIF ;
  85:  ENDIF ;
  86:   ;
  87:  ENDIF ;
  88:   ;
  89:   ;
  90:  !-------------------------------- ;
  91:  !Y profiles ;
  92:  !-------------------------------- ;
  93:   ;
  94:  IF (R[81]=2) THEN ;
  95:  ! Positive direction ;
  96:  !-------------------------------- ;
  97:  IF (R[83]=1) THEN ;
  98:   ;
  99:  ! --------------R1 go up--------- ;
 100:  IF ((R[158]=(2)) AND (R[469]<>1) AND (R[469]<>4) AND (R[461]<>0) AND (R[201]=3)) THEN ;
 101:  IF (R[453]>R[461]),R[158]=(-1) ;
 102:  ENDIF ;
 103:   ;
 104:  ! --------------R3 go up--------- ;
 105:  IF ((R[159]=(2)) AND (R[469]<>3) AND (R[469]<>4) AND (R[463]<>0) AND (R[201]=3)) THEN ;
 106:  IF (R[454]>R[463]),R[159]=(-1) ;
 107:  ENDIF ;
 108:   ;
 109:  ! --------- R1 go down ---------- ;
 110:  IF ((R[158]=(-2)) AND (R[470]<>1) AND (R[470]<>4) AND (R[201]=3)) THEN ;
 111:  IF (R[453]>R[462]-R[465]),R[158]=1 ;
 112:  ENDIF ;
 113:   ;
 114:  ! --------- R3 go down ---------- ;
 115:  IF ((R[159]=(-2)) AND (R[470]<>3) AND (R[470]<>4) AND (R[201]=3)) THEN ;
 116:  IF (R[454]>R[464]-R[465]),R[159]=1 ;
 117:  ENDIF ;
 118:  ELSE ;
 119:  ! Negative direction ;
 120:  !-------------------------------- ;
 121:  ! --------------R1 go up--------- ;
 122:  IF ((R[158]=(2)) AND (R[469]<>1) AND (R[469]<>4) AND (R[461]<>0) AND (R[201]=3)) THEN ;
 123:  IF (R[453]<R[461]),R[158]=(-1) ;
 124:  ENDIF ;
 125:   ;
 126:  ! --------------R3 go up--------- ;
 127:  IF ((R[159]=(2)) AND (R[469]<>3) AND (R[469]<>4) AND (R[463]<>0) AND (R[201]=3)) THEN ;
 128:  IF (R[454]<R[463]),R[159]=(-1) ;
 129:  ENDIF ;
 130:   ;
 131:  ! --------- R1 go down ---------- ;
 132:  IF ((R[158]=(-2)) AND (R[470]<>1) AND (R[470]<>4) AND (R[201]=3)) THEN ;
 133:  IF (R[453]<R[462]+R[465]),R[158]=1 ;
 134:  ENDIF ;
 135:   ;
 136:  ! --------- R3 go down ---------- ;
 137:  IF ((R[159]=(-2)) AND (R[470]<>3) AND (R[470]<>4) AND (R[201]=3)) THEN ;
 138:  IF (R[454]<R[464]+R[465]),R[159]=1 ;
 139:  ENDIF ;
 140:  ENDIF ;
 141:  ENDIF ;
 142:  ENDIF ;
 143:  ELSE ;
 144:  ! If no crosses ;
 145:  R[158]=2    ;
 146:  R[159]=2    ;
 147:  ENDIF ;
/POS
/END
